/*
[문제]
인체에 치명적인 바이러스를 연구하던 연구소에서 바이러스가 유출되었다. 다행히
바이러스는 아직 퍼지지 않았고, 바이러스의 확산을 막기 위해서 연구소에 벽을 세우려고
한다.

연구소는 크기가 N×M인 직사각형으로 나타낼 수 있으며, 직사각형은 1×1 크기의
정사각형으로 나누어져 있다. 연구소는 빈 칸, 벽으로 이루어져 있으며, 벽은
칸 하나를 가득 차지한다.

일부 칸은 바이러스가 존재하며, 이 바이러스는 인접한 빈 칸으로 모두 퍼져나갈 수 있다.
새로 세울 수 있는 벽의 개수는 3개이며, 꼭 3개를 세워야 한다.

예를 들어, 아래와 같이 연구소가 생긴 경우를 살펴보자.
2 0 0 0 1 1 0
0 0 1 0 1 2 0
0 1 1 0 1 0 0
0 1 0 0 0 0 0
0 0 0 0 0 1 1
0 1 0 0 0 0 0
0 1 0 0 0 0 0

이 때, 0은 빈 칸, 1은 벽, 2는 바이러스가 있는 곳이다. 아무런 벽을 세우지 않는다면,
바이러스는 모든 빈 칸으로 퍼져나갈 수 있다.

2행 1열, 1행 2열, 4행 6열에 벽을 세운다면 지도의 모양은 아래와 같아지게 된다.
2 1 0 0 1 1 0
1 0 1 0 1 2 0
0 1 1 0 1 0 0
0 1 0 0 0 1 0
0 0 0 0 0 1 1
0 1 0 0 0 0 0
0 1 0 0 0 0 0

바이러스가 퍼진 뒤의 모습은 아래와 같아진다.
2 1 0 0 1 1 2
1 0 1 0 1 2 2
0 1 1 0 1 2 2
0 1 0 0 0 1 2
0 0 0 0 0 1 1
0 1 0 0 0 0 0
0 1 0 0 0 0 0

벽을 3개 세운 뒤, 바이러스가 퍼질 수 없는 곳을 안전 영역이라고 한다. 위의 지도에서
안전 영역의 크기는 27이다.

연구소의 지도가 주어졌을 때 얻을 수 있는 안전 영역 크기의 최대값을 구하는 프로그램을
작성하시오.

[입력]
첫째 줄에 지도의 세로 크기 N과 가로 크기 M이 주어진다. (3 ≤ N, M ≤ 8)

둘째 줄부터 N개의 줄에 지도의 모양이 주어진다. 0은 빈 칸, 1은 벽, 2는 바이러스가 있는
위치이다. 2의 개수는 2보다 크거나 같고, 10보다 작거나 같은 자연수이다.

빈 칸의 개수는 3개 이상이다.

[출력]
첫째 줄에 얻을 수 있는 안전 영역의 최대 크기를 출력한다.

[예제 입력]
7 7
2 0 0 0 1 1 0
0 0 1 0 1 2 0
0 1 1 0 1 0 0
0 1 0 0 0 0 0
0 0 0 0 0 1 1
0 1 0 0 0 0 0
0 1 0 0 0 0 0

[예제 출력]
27

[예제 입력 2]
4 6
0 0 0 0 0 0
1 0 0 0 0 2
1 1 1 0 0 2
0 0 0 0 0 2

[예제 출력 2]
9

[예제 입력 3]
8 8
2 0 0 0 0 0 0 2
2 0 0 0 0 0 0 2
2 0 0 0 0 0 0 2
2 0 0 0 0 0 0 2
2 0 0 0 0 0 0 2
0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0

[예제 출력 3]
3
*/


#include <iostream>
#include <algorithm>
#include <string.h>
using namespace std;

int n, m, rtn, wall = 0;
int board[9][9];
int visit[9][9];
int dx[] = { -1, 1, 0, 0 };
int dy[] = { 0, 0, -1, 1 };

int dfs(int x, int y) {
	visit[x][y] = 1;
	int ret = 1;

	for (int i = 0; i < 4; i++) {
		int nx = x + dx[i];
		int ny = y + dy[i];

		if (nx >= 0 && nx < n && ny >= 0 && ny < m && !visit[nx][ny] && !board[nx][ny])
			ret += dfs(nx, ny);
	}

	return ret;
}

int getmax(int ix, int iy, int jx, int jy, int kx, int ky) {
	board[ix][iy] = 1;
	board[jx][jy] = 1;
	board[kx][ky] = 1;
	memset(visit, 0, sizeof(visit));

	int ret = 0;

	for (int i = 0; i < n; i++) {
		for (int j = 0; j < m; j++) {
			if (board[i][j] == 2 && !visit[i][j])
				ret += dfs(i, j);
		}
	}

	board[ix][iy] = 0;
	board[jx][jy] = 0;
	board[kx][ky] = 0;

	return ret;
}

int main() {
	cin >> n >> m;
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < m; j++) {
			cin >> board[i][j];
			if (board[i][j] == 1)
				wall++;
		}
	}

	rtn = 987654321;
	for (int ix = 0; ix < n; ix++)
		for(int iy = 0; iy < m; iy++)
			for(int jx = 0; jx < n; jx++)
				for(int jy = 0; jy < m; jy++)
					for(int kx = 0; kx < n; kx++)
						for (int ky = 0; ky < m; ky++) {
							if (board[ix][iy] || board[jx][jy] || board[kx][ky])
								continue;

							rtn = min(rtn, getmax(ix, iy, jx, jy, kx, ky));
						}

	cout << n * m - 3 - wall - rtn << '\n';

	return 0;
}

