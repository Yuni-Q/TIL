/*
[문제]
수빈이는 동생과 숨바꼭질을 하고 있다.
수빈이는 현재 점 N(0 ≤ N ≤ 100,000)에 있고,
동생은 점 K(0 ≤ K ≤ 100,000)에 있다. 수빈이는 걷거나 순간이동을 할 수 있다.
만약, 수빈이의 위치가 X일 때 걷는다면 1초 후에 X-1 또는 X+1로 이동하게 된다.
순간이동을 하는 경우에는 1초 후에 2*X의 위치로 이동하게 된다.

수빈이와 동생의 위치가 주어졌을 때,
수빈이가 동생을 찾을 수 있는 가장 빠른 시간이 몇 초 후인지
구하는 프로그램을 작성하시오.

[입력]
첫 번째 줄에 수빈이가 있는 위치 N과 동생이 있는 위치 K가 주어진다.

[출력]
수빈이가 동생을 찾는 가장 빠른 시간을 출력한다.

[예제 입력]
5 17

[예제 출력]
4

[힌트]
수빈이가 5-10-9-18-17 순으로 가면 4초만에 동생을 찾을 수 있다
*/

#include <iostream>
#include <queue>
using namespace std;

int N, K;			// N: 현재의 점 K: 동생의 점
pair<int, int> now; // <node, time>
queue<pair<int, int>> q;	//q를 pair로 선언가능
bool visit[100005];
int ans;		// 

int main() {
	cin >> N >> K;
	q.push(make_pair(N, 0));

	while (!q.empty()) {
		now = q.front();
		q.pop();

		int position = now.first;
		int time = now.second;
		visit[position] = true;

		if (position == K) {
			ans = time;
			break;
		}

		if (position * 2 <= 100000 && !visit[position * 2])
			q.push(make_pair(position * 2, time + 1));

		if (position - 1 >= 0 && !visit[position - 1])
			q.push(make_pair(position - 1, time + 1));

		if (position + 1 <= 100000 && !visit[position + 1])
			q.push(make_pair(position + 1, time + 1));
	}

	cout << ans << '\n';
}