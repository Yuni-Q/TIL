◆ ◈


입력실행창에 들어가는 명령어를 Transaction Code(T-code) 라고 한다.

T-code	: 트랜잭션을 일으키는 코드명

물결화면을 세션이라 부름.(브라우저의 새 탭과 같은 느낌) Session은 최대 6개까지 가능.

------------------------------------------------------------------------------------------

◆실행창에 들어가는 T-code 종류
	▶ SE01  : CTS조회.  
	▶ SE80	: 아밥 워크스페이스(벤치) (즐겨찾기에서 오른쪽 클릭 / 트랜잭션삽입 )
	▶ SE11	: 테이블관련(ABAP Dictionary) 스페이스
	▶ SE24 : CLASS Builder (네이밍 규칙-zcl~)
	▶ SE37	: Function Builder
	▶ SE38	: Report program 	   =>> ZDOWN (만들어 놓은 프로그램 소스를 HTML문서화)
	▶ SE54	: 생성된 테이블에 대한 권한 및 유지보수 다이얼로그에 관한 트랜잭션실행
	▶ SE93	: T-CODE 생성
	▶ SM30	: 테이블 또는 뷰를 유지보수할 때 쓰는 트랜잭션실행

fb01 전표생성
fb06 세부항목
SHDB : 레코딩
	

	▶ /NEX	: 물어보지않고 종료 (로그아웃) 작업했던 것들까지 사라질 수 있으니 조심해야함.
	▶ /NEND	: 종료할 것인지 물어보고 종료한다.
	▶ /N	: 바로 전 단계로 가는 것.
	▶ /N???	: 현재창에서 트랜잭션 실행
	▶ /O???	: 새 창(세션)에서 트랜잭션 실행. O뒤에 쓰는 명령어를 새 창에서 실행 
	▶ /I	: 현재세션삭제


◆단축키
	▶ F2	: Object내의 구성요소 상세조회
	▶ F3	: 일반적으로 BACK 기능
	▶ F4	: F4 HELP / 도움말을 제공 / 돋보기클릭하는 기능
	▶ F7	: 일반적으로 Object 조회
	▶ F8	: 일반적으로 실행을 의미

 **ABAP Debugger 단축키
	▶ F5 	: Step by Step
	▶ F6	: Function, Perform, class 등 처리를 통과함.
	▶ F7 	: Function, Perform, class 등을 바로 빠져나감.

------------------------------------------------------------------------------------------
◆SAP System 구성
	▶SAP System은 client 단위로 구성된다.
	▶client는 3자리 100단위의 숫자로 구분된다
	▶SAP System은 1개 이상의 client로 구성될 수 있다.

◆SAP System 구조
	DEV(개발기) -> QAS(테스트기) -> PRD(운영기) -> 


	*Cross client : 클라이언트를 같은 서버내에서 공유는 하되, 데이터는 공유하지 않는다. 
			각각의 클라이언트 속에 있는 데이터는 클라이언트 내에서만 사용가능하다.

------------------------------------------------------------------------------------------

◆SAP 약어
	▶ SAP STANDARD		: SAP에서 자체적으로 제공한 가장 기본적인 상태
	▶ CBO(Customer Bolt On)	: STANDARD에서 개발자들이 기능을 추가적으로 개발하는 것을 CBO라고 한다.
		*CBO의 Naming rule : 첫 글자는 'Z' 또는 'Y'로 시작해야한다. (팀전체에서 사용되는 것들은 주로 'Y'로 사용. 실무자는 'Z'로 한다.)			
	▶ Dictionary		: DBMS에서 부르는 테이블,뷰 등을 SAP에서는 ABAP Dictionary라고 보면 된다.
	▶ B S P			: Business Server Page

------------------------------------------------------------------------------------------

◆Program Type
	▶ 1 - Executable program 	 : 실행가능한 프로그램  (주로 F8로 실행가능함)
	▶ I - Include program	: 메인 프로그램에 포함되어 있는 프로그램들(단독실행?안되는듯?)
	▶ M - Module pool	: T-code로만 실행되는 것들
	▶ F - Function group	: 특정기능들만 모여있는 펑션을 모아둔 곳
	▶ S - Subroutine pool	: 부프로그램


◆Message Type
    :  MESSAGE ' ???data??? ' TYPE ' ??type??? '    // 메세지 타입에 따라서 메세지를 출력한다.

	▶ I - Info	: 사용자에게 정보를 팝업으로 제공 ( ex: 75건이 조회되었습니다. )
	▶ W - Warning	: 프로세스는 계속 진행하지만 경고 (노란색으로 표시) [실행한다? 근데 데이터가 없을 수도 있다 라는식의 경고 제공]
	▶ E - Error	: 에러타입 (빨간색으로 표시됨.)
	▶ A - Abend	:
	▶ X - Exit	:
	▶ S - Success	: 실행 완료 (녹색으로 표시됨.)


------------------------------------------------------------------------------------------

◆DB 구성요소
	▶ DB -> TABLE SPACE(테이블들을 넣을 수 있는 공간) -> TABLE -> DATA
	
------------------------------------------------------------------------------------------

◆ABAP Data Type
    *숫자형데이터는 오른쪽정렬로 진행됨. 
	▶ CHAR (C)	: 문자형 Data ('abc' , '123')
	▶ NUMC (N)	: 수치형 문자 Data , 데이터는 무조건 숫자만 가능 ('12' -> [0][1][2] )
		*NUMC3 일 경우 [][][] 3칸 제공. 12를 쓸 경우 빈 자리는 0으로 채워짐
	▶ INT (I)	: 정수형 Data 자릿수 정의 불가
	▶ PACKED (P)	: 실수형 Data, 소수점 이하 몇 자리쓸지 정의할 수 있음. (실무에서는 데시멀(decimal)타입이라고도 말함)
		*TYPE P 16자리까지 가능. DECIMALS 14자리까지 가능. 12.12345678911234
	▶ DATS	(D)	: 날짜형 Data 자릿수 정의 불가 (YYYY.MM.DD)
	▶ TIMS (T)	: 시간형 Data 자릿수 정의 불가 (HH:MM:SS)
------------------------------------------------------------------------------------------
=========================================================================================정리끝 1일차,








------------------------------------------------------------------------------------------
/////////////////////////////1일차 끝/////////////////////////////////////////////////////



◆SAP 시스템이 테이블이나 구조의 필드 정보를 검색하는 순서
	Table field -> Data element ->Domain(Search help,Possible entry)




◆Table 종류
	▶Transparent : DB와 1:1 관계이며, ABAP Dictionary에서 생성하면 DB에도 동일하게 생성된다. (그냥 일반적 테이블이라 생각하면됨.)

	▶Pool(ed) & Table Pool  : DB와 N(P):1(D)의 관계이다.이 모여있는 것을 Table pool이라고 한다. 수많은 파일(pooled table)을 압축해서 하나의 알집파일(table pool)을 만드는 형태
		 SAP에서는 복수의 테이블(pooled table)로 존재되어있지만 실제 DB(오라클이나 mysql 등)에는 Table pool이라는 한개의 개념으로 저장이 되어진다.

	▶Cluster(ed) & Table Cluster: 포도송이라고 생각하면된다. Header / Detail로 이루어져있다. Detail로 이루어져있는 수많은 포도알들을 모아둔 것을 Table cluster라 한다. 
방대한 자식테이블들에 대한 검색을 빠르게 하기 위해서 헤더를 사용해서 사용하기 위해 만든 것이다.
	
*********************************************************************

◆Data element와 Domain의 차이
	▶공통점 : 데이터 유형 및 길이의 정보를 가지고 있다. Table field의 속성을 정의하는데 사용된다.
	▶차이점 : Domain은 Search help(possible entry)기능을 제공한다.
		 *Seach help : 탐색도움말  / Possible entry : 입력가능한 항목

domain에 value range 속에 possible entry를 넣어 둘 수 있다.



◆Data element 사용시 주의사항.
	▶Standard data element를 우선 검색하여 사용.
	▶없을 경우 CBO data element를 검색하여 사용한다.
	▶최종 적합한 element가 없을 경우 신규로 생성하여 사용한다.

------------------------------------------------------------------------------------------



텍스트테이블
와일드카드 *   /  ?


=================================================================================================

predefine : 타입과 길이를 직접 작성 하는 것
활성(Active) 외에는 미완료 상태
-------------------------------------------------------------------------------------------------



=================================================================================================

TABLE과 structure의 차이
		--------------------------------------
		|        TABLE	|  STRUCTURE(구조)  |
		---------------------------------------
PK	       	           YES		NO
데이터저장	           YES		NO
메모리구조	      리스트형식(array list)	1열(Hash map)

=================================================================================================

INCLUDE
STRUCTURE를 CREATE해서 INCLUDE필드를 추가시켜준다.
사용할 테이블에 .INCLUDE를 작성 후 만들어 둔 INCLUDE STRUCTURE 이름을 써준다.

APPEND
테이블에서 구조추가를 클릭 후 APPEND 정의를 해주면된다.



=================================================================================================

다양한 필드의 종류

MANDT는 테이블을 만들 때 무조건 작성할 것 - Primary Key , initial values는 반드시 체크 !!!!!!!!!!!

TIME STAMP : ERDAT, ERZET,  ERNAM / AEDAT, AEZET, AENAM  [생성일,생성시간,생성자 / 수정일,수정시간,수정자]

◆통화와 통화키
	DMBTR (통화금액)	:   해당 통화금액을 넣고 Currency/Quantity fields에 참조테이블과 참조필드를 작성해준다.
	WAERS (통화키)	: KRW , USD , JPY 등등

◆수량과 수량의 기본단위
 	MENGE(수량)	: 해당 수량을 넣고 Currency/Quantity fields에 참조테이블과 참조필드를 작성해준다.
	MEINS(수량 단위)	: KG, G , MG 등등

=================================================================================================

◆인덱스 추가
상단의 기술적 세팅 우측 인덱스 추가를 누른 후 - 파일버튼 클릭 - 인덱스아이디를 IDX로 주고- 작성시작.
데이터양이 방대해질 경우 검색 속도가 느려지는데 그것을 보완하기 위해 해당 필드를 기준으로 인덱스를 추가해서 검색 속도를 향상시킬 수 있다.


--------------------------------------------------------------------------------------------------


◆VIEW : View는 테이블을 생성한 후 생성할 수 있으며, 테이블에서 가져올 필드들을 직접 골라서 뷰에 담을 수 있다.
	▶Database View
	▶Projection View
	▶Maintenace View(주로 생성하게 될 것.)
	▶Help View

◆VIEW 생성 후 트랜잭션 코드까지 등록하는 흐름
SE11 -> SE54 (Function Group asign , 테이블 선택 후 가져올 필드 구성) -> SM30(View 실행 , Data 유지보수)
SE93(트랜잭션 코드 생성)


◆외래키를  필드에 넣어서 마스터테이블을 접속 후 텍스트테이블 명을 알아내서 그 텍스트테이블을 추가해야한다.설정 : 테이블을 만들 때 설정할 수 있으며, 필드를 선택 후 외래키를 클릭한다.











----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

주석처리 ctrl +  <   / 주석해제 ctrl+>
주석처리 *(주석으로 1개의 라인을 전부다 차지할 때) , "(주로 코드사이에 주석을 넣을 때 사용)
--------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------

◆변수선언의 기본구조
	DATA: gv_변수명 TYPE (type).
	DATA: lv_변수명 TYPE (type).

--------------------------------------------------------------------------------------------

Program  208p 반드시 확인할것. , 209p
	InternalTable : 메모리에 일시적으로 존재한다, 인터널테이블은 한 행씩 처리한다. 라인단위로 
	ABAP Dic : 물리적 공간에 존재


	WorkArea	:메모리에 일시적 존재하며, 인터널테이블에 있는 데이터를 가져와서 잠시 담아둔다.
	ABAP Structure : 물리적 공간에 존재.
--------------------------------------------------------------------------------------------

Headerline InternalTable 
OCCURS 뒤에 오는 숫자는 데이터를 몇개를 넣을지에 대해서. 0으로 해두면 들어오는만큼 사이즈를 늘려준다.


TYPE 에 사용되는 것들은 abap dic 에서 생성된 개체들에 대해서 사용하는 것이며.
LIKE 에 사용되는 것들은 Program에서 선언한까지 참조.

TYPE TABLE OF 에는 테이블 뿐만아니라 스트럭쳐도 가능하다.

--------------------------------------------------------------------------------------------
LOOP AT(ITAB)

ENDLOOP

LOOP AT 는 Internal Table을 대상으로 수행되는 명령어
수행기준 : Internal Table 에 data가 있는 만큼 반복해서 수행한다.
option : where 즉 반복조건을 줄 수 있다.
	from 즉 반복 시작위치를 줄 수 있다.

-------------------------------------
데이터 수정 및 삽입 abap 명령어

INSERT internal table INDEX 1.    <======헤더라인이있는 테이블의 경우.  (넣고싶은곳에 넣는것. 인덱스를 통해서) insert ___ into ___ index __.
APPEND internal table.    <======헤더라인이있는 테이블의 경우.  (그냥 순서대로 넣고싶을 때)	append ___ to ___.
	
 
MODIFY 수정하는것. transporting은 반드시 확인해서 넣어줄것. modify ____ from ____  transporting ____

SY-TABIX(Table index라는 뜻)


NE  = not equals


READ TABLE ______ INTO _____   1) , 2)  _______TRANSPORTING
1) INDEX(인덱스로 해당 레코드를 꺼내오는 것.)
2) WITH KEY(원하는 필드에 들어있는 값에 대해서 입력한 후 레코드를 가져오지만, 다수의 레코드가 있을 경우 제일 처음 레코드를 가져온다.)


if sy-subrc eq 0.   <----------해당 로직이 성공적으로 되었을 경우 0이 뜬다. 저 조건이 만족할 때 if문 실행하도록 로직을 짜주도록한다.


ALV = ABAP LIST VIEWER

is initial = is null
is not initial = is not null

--------------------------------------------------------------------------------------------
into table 

open sql
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
INTO TABLE 인터널 테이블과 DB테이블의 LAYOUT 즉, 필드의 개수 및 순서가 100% 일치해야함.

INTO CORRESPONDING FIELDS OF	:   필드개수와 순서가 안맞아도 알아서 불러옴. DB에서 LAYOUT에 일치하는 필드에 알아서 들어감.


write : = syso

select single 은 workarea에 사용하는 것이 맞다.

_-------------------------
▶CONSTANTS 상수를 선언할 때 쓰는 것.  CONSTANTS gc_변수명 value 'x'.

▶SELECTION SCREEN (선택화면 , 1000번 스크린이라고도 부름)
		정의 : 프로그램의 실행조건을 입력하는 화면. 화면번호 1000번을 부여받음


▶VARIANT (변형)
		정의 : SELECTION SCREEN의 실행조건을 별도로 저장해 놓은 것. 추후 선택해서 사용가능.


▶SELECTION SCREEN을 구성하는 단위
		PARAMETER(S) : 단일값 전역변수처럼 사용가능
		SELECT-OPTIONS : 범위값 또는 불특정 다수의 값
			-WHERE CARRID IN ('AA', 'AZ', 'LH')
			-WHERE CARRID BETWEEN 'AA' AND 'AZ'
			-메모리 구조는 HEADER LINE INTERNAL TABLE임.
			-선행조건: 사용하고자 하는 ABAP DIC가 상단에 TABLES로 선언이 되어 있어야 한다.

▶ PARAMETERS 와 SELECT-OPTIONS 사용상 차이점.
		:PARAMETER는 조건과 무조건 일치하는 값을 가져옴.
		:SELECT-OPTIONS는 조건을 입력하지 않았을 시 SQL문에서 해당 조건은 무시한다.
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
▶INCLUDE PROGRAM 의 종류
	-TOP INCLUDE	: 변수 , ITAB의 선언부
	-PBO ROUTINE	: 스크린의 PBO 구현부
	-PAI ROUTINE	: 스크린의 PAI 구현부
	-FORM ROUTINE	: 부 프로그램 구현부 ( SUB ROUTINE)

▶NAMING
	-PROGRAM NAME	+ TOP	:  TOP 	INCLUDE
	-PROGRAM NAME	+ O01	:  PBO 	INCLUDE
	-PROGRAM NAME	+ I01	:  PAI 	INCLUDE
	-PROGRAM NAME	+ F01	:  FORM INCLUDE

_____________________________________________________________________________________________
▶PARAMETER 전달방식
	*CALL BY VALUE	: 값 그 자체를 전달
	*CALL BY REFERENCE	: 값이 있는 주소값을 전달


▶PERFORM에서 USING => CALL BY VALUE  /  CHANGING => CALL BY REFERENCE

▶PBO / PAI

-------------------------------------------------------------------------------------------------------
▶ ALV 생성 순서  !!!!!!!!!!!!!! 순서 매우중요!!!!!!!!!!!!!!
	: SCREEN -> 컨테이너 -> ALV
▶해제 순서
	: ALV -> 컨테이너 -> SCREEN

▶container는 클래스이다.

▶메소드 호출 ->로 한다.

▶DOCKING CONTAINER / FIELD CATALOG   <-숙지할것.



▶FOR ALL ENTRIES IN <--- DB테이블과 INTERNAL TABLE 의 결합에 대한 명령어.
	: INTERNAL TABLE이 비어있으면 안됨.!!!!!!!!!!!!!!!
	 :결합조건의 필드 기준으로 정렬. (SORT)

▶MOVE-CORRESPONDING : WA TO WA         필드에 상관없이 필요한 것들만 넣어줌.

=========================================================================================================
▶CLASS - METHODS 사용법
  클래스명 =>메소드명

▶PUBLIC METHODS  
 인스턴스(변수명)->메소드명

▶RANGE gr_connid FOR spfli-connid.    < - select-options와 동일하나 쿼리에 in을 넣고 싶을 때 사용하면 유용함. 또는 low/ high를 한번에 사용할 때도 유용하다.


▶SAP MEMORY - 단순한 일반변수값만 가지고 있음.
------------------------------------------------------------------
		SET PARAMETER ID '세글자'
    			FIELD '0001'.

------------------------------------------------------------------

!!!!!!!결과 ALV에 전표번호가 나올 시에는 무조건 전표번호에 트랜잭션(FB60)발생시키는 핫스팟 세팅해야함.

!!CALL TRANSACTION (T-CODE) : 모듈 풀  이동.   (+AND SKIP FIRST SCREEN)
!! SUBMIT PROGRAM ID : 실행가능한 프로그램을 호출할때.

▶메세지클래스 사용법
▶FCAT - CFIELDNAME(CURRENCY) 왜 사용하는지.
▶ CTS는 위에 / (CHANGE REQUEST)   //// TASK번호
▶COLLECT wa INTO itab

▶SCRENN

▶ 'CONVERSION_EXIT_ALPHA_INPUT' : 앞자리의 빈공간에 0을 붙여주는 펑션. 




*&---------------------------------------------------------------------*
*& Report ZR20_45
*&---------------------------------------------------------------------*
*&
*&---------------------------------------------------------------------*
REPORT zr20_45.

DATA : lt_data TYPE TABLE OF ztit00_07,
       ls_data TYPE ztit00_07.

DATA : lv_var(30),
       lv_time(2)  TYPE i,
       lv_month(2) TYPE n,
       lv_sum      TYPE bseg-dmbtr. " 누적금액 변수

FIELD-SYMBOLS <lv_fs> TYPE any.

SELECTION-SCREEN BEGIN OF BLOCK pa1 WITH FRAME TITLE TEXT-t01.
PARAMETERS : p_gjahr TYPE bkpf-gjahr,
             p_monat TYPE bkpf-monat.
SELECTION-SCREEN END OF BLOCK pa1.

INITIALIZATION.
  p_gjahr = sy-datum(4).

START-OF-SELECTION.

*-- 대상데이터 조회
  CLEAR lt_data.
  SELECT * INTO CORRESPONDING FIELDS OF TABLE lt_data
    FROM ztit00_07
    WHERE gjahr EQ p_gjahr.

**********************************************************************
* 1. 수작업 처리시
**********************************************************************
  READ TABLE lt_data INTO ls_data INDEX 1.

*  CASE p_monat.
*    WHEN '01'.
*      lv_sum = ls_data-month01.
*    WHEN '02'.
*      lv_sum = ls_data-month01 + ls_data-month02.
*    WHEN '03'.
*      lv_sum = ls_data-month01 + ls_data-month02 + ls_data-month03.
*    WHEN '04'.
*      lv_sum = ls_data-month01 + ls_data-month02 + ls_data-month03 + ls_data-month04.
*    WHEN '05'.
*      lv_sum = ls_data-month01 + ls_data-month02 + ls_data-month03 + ls_data-month04 + ls_data-month05.
*    WHEN '06'.
*      lv_sum = ls_data-month01 + ls_data-month02 + ls_data-month03 + ls_data-month04 + ls_data-month05
*             + ls_data-month06.
*    WHEN '07'.
*      lv_sum = ls_data-month01 + ls_data-month02 + ls_data-month03 + ls_data-month04 + ls_data-month05
*             + ls_data-month06 + ls_data-month07.
*    WHEN '08'.
*      lv_sum = ls_data-month01 + ls_data-month02 + ls_data-month03 + ls_data-month04 + ls_data-month05
*             + ls_data-month06 + ls_data-month07 + ls_data-month08.
*    WHEN '09'.
*      lv_sum = ls_data-month01 + ls_data-month02 + ls_data-month03 + ls_data-month04 + ls_data-month05
*             + ls_data-month06 + ls_data-month07 + ls_data-month08 + ls_data-month09.
*    WHEN '10'.
*      lv_sum = ls_data-month01 + ls_data-month02 + ls_data-month03 + ls_data-month04 + ls_data-month05
*             + ls_data-month06 + ls_data-month07 + ls_data-month08 + ls_data-month09 + ls_data-month10.
*    WHEN '11'.
*      lv_sum = ls_data-month01 + ls_data-month02 + ls_data-month03 + ls_data-month04 + ls_data-month05
*             + ls_data-month06 + ls_data-month07 + ls_data-month08 + ls_data-month09 + ls_data-month10
*             + ls_data-month11.
*    WHEN '12'.
*      lv_sum = ls_data-month01 + ls_data-month02 + ls_data-month03 + ls_data-month04 + ls_data-month05
*             + ls_data-month06 + ls_data-month07 + ls_data-month08 + ls_data-month09 + ls_data-month10
*             + ls_data-month11 + ls_data-month12.
*  ENDCASE.
*
*  WRITE : '월합계 : ', lv_sum.

**********************************************************************
* 2. FIELD-SYMBOLS 이용시
**********************************************************************
*-- 입력월 만큼 반복횟수 구하기
  lv_time = p_monat.

*-- 입력월 만큼 반복하며 01월 부터 입력월 까지 합계금액 계산
  READ TABLE lt_data INTO ls_data INDEX 1.

  CLEAR lv_month.
  DO lv_time TIMES.

*-- 월별 변수 이름을 작성한다
    lv_month = lv_month + 1.

*-- Work area field정보를 변화 시킨다
    CLEAR lv_var.
    CONCATENATE 'LS_DATA-MONTH' lv_month INTO lv_var.
    ASSIGN (lv_var) TO <lv_fs>. " <lv_fs>는 Work area 필드의 값을 할당받음
*     ASSIGN LS_DATA-month01 02 03 TO <lv_fs>.

    lv_sum = lv_sum + <lv_fs>.
*      lv_sum = ls_data-month01 + ls_data-month02.

  ENDDO.

  DATA : lv_amt(20).
  WRITE lv_sum CURRENCY 'KRW' TO lv_amt.

  WRITE : '월합계 : ', lv_amt.

field value 확인할것.



----------------------------------------------------------------------

*-- 쿼리실행과 동시에 IT생성됨
SELECT *
	INTO TABLE @DATA(LT_BODY)
	FROM SCARR.

=>이경우에는 WA를 만들어줘야한다.
LOOP AT LT_BODY INTO DATA LS_BODY
ENDLOOP.


